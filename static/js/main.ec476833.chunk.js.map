{"version":3,"sources":["logo.svg","loading.svg","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","shuffleArray","array","counter","length","index","getRandomNumber","temp","x","Math","floor","random","AlbumCover","src","this","props","track","album","images","url","style","width","height","Component","App","state","text","musicData","songsLoaded","track2","track3","track_id","track_array","Array","fill","timeout","fetch","method","headers","Authorization","then","response","json","data","console","log","indices","Set","size","items","add","from","setState","id","setTimeout","newGame","track_name","clearTimeout","swal","className","logo","alt","name","preview_url","playStatus","Sound","status","PLAYING","onClick","checkAnswer","loading","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ec476833.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6a581294.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.ed34bc26.svg\";","/*global swal*/\r\n\r\nimport React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport loading from './loading.svg';\r\nimport './App.css';\r\nimport Sound from 'react-sound';\r\nimport Button from './Button';\r\n\r\nconst apiToken = 'BQAvxA1A9sN5RXipaXpGScGUIg10AEi29sVqSl67hhGYSykxgxaQllLQo3tL7JD0YPv-sVu3KrMK8ijt7cCRissT_vH1Qla9ZbXq3TfqmNyPZs-OScM-umLSqvbnn2NNUthKv-wRtHR71S_UjxbT1A25eXU-QTm0ZPj3ONluDA';\r\n\r\nfunction componentDidMount(){\r\n  this.setState({ text: \"Bonjour\" });\r\n}\r\n\r\nfunction shuffleArray(array) {\r\n  let counter = array.length;\r\n\r\n  while (counter > 0) {\r\n    let index = getRandomNumber(counter);\r\n    counter--;\r\n    let temp = array[counter];\r\n    array[counter] = array[index];\r\n    array[index] = temp;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\n/* Return a random number between 0 included and x excluded */\r\nfunction getRandomNumber(x) {\r\n  return Math.floor(Math.random() * x);\r\n}\r\n\r\nclass AlbumCover extends Component {\r\n  render() {\r\n    const src = this.props.track.album.images[0].url; // A changer ;)\r\n    return (<img src={src} style={{ width: 400, height: 400 }} />);\r\n  }\r\n}\r\n\r\n//this.track.album.images[0].url\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: \"\",\r\n      musicData: \"\",\r\n      songsLoaded: false,\r\n      track: \"\",\r\n      track2: \"\",\r\n      track3: \"\",\r\n      track_id:\"\",\r\n      track_array: Array(3).fill(null),\r\n      timeout: null\r\n\r\n    };\r\n  }\r\n  componentDidMount(){\r\n    fetch('https://api.spotify.com/v1/me/tracks?market=FR', {\r\n    method: 'GET',\r\n    headers: {\r\n    Authorization: 'Bearer ' + apiToken,\r\n    },\r\n  })\r\n    .then(response => response.json())\r\n    .then((data) => {\r\n      console.log(\"Réponse reçue ! Voilà ce que j'ai reçu : \", data);\r\n      let indices = new Set();\r\n      while (indices.size < 3){\r\n        let index = getRandomNumber(data.items.length);\r\n        indices.add(index);\r\n      };\r\n      indices = Array.from(indices);\r\n      //let indices = shuffleArray([0,1,2]);\r\n      this.setState({text: \"text personnalisé\",\r\n              musicData: data.items,\r\n              track: data.items[indices[0]].track,\r\n              track2: data.items[indices[1]].track,\r\n              track3: data.items[indices[2]].track,\r\n              track_array: shuffleArray([data.items[indices[0]].track,data.items[indices[1]].track,data.items[indices[2]].track]),\r\n              songsLoaded: true,\r\n              track_id:data.items[0].track.id,\r\n              timeout: setTimeout(() => this.newGame(), 1500)\r\n    })\r\n    \r\n\r\n  })\r\n    this.setState({ text: \"Bonjour\" });\r\n  }\r\n  newGame(){\r\n    let indices = new Set();\r\n    while (indices.size < 3){\r\n      let index = getRandomNumber(this.state.musicData.length);\r\n      indices.add(index);\r\n    };\r\n    indices = Array.from(indices);\r\n    this.setState({\r\n      track: this.state.musicData[indices[0]].track,\r\n      track2: this.state.musicData[indices[1]].track,\r\n      track3: this.state.musicData[indices[2]].track,\r\n      track_array: shuffleArray([this.state.musicData[indices[0]].track,this.state.musicData[indices[1]].track,this.state.musicData[indices[2]].track]),\r\n      timeout: setTimeout(() => this.newGame(), 1500)\r\n    }\r\n    )}\r\n  checkAnswer(track_name) {\r\n    if (track_name == this.state.track_id){\r\n      clearTimeout(this.state.timeout);\r\n      swal('Bravo', 'Sous-titre', 'success').then(() => this.newGame());\r\n    } else {\r\n      swal('No', 'Sous-titre', 'error');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.songsLoaded){\r\n      return(\r\n        <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n          <h1 className=\"App-title\">Bienvenue sur le Blindtest</h1>\r\n        </header>\r\n        <div className=\"App-images\">\r\n          <p>{this.state.text}</p>\r\n\r\n          <p>Longueur du Tableau</p>\r\n          <p>{this.state.musicData.length}</p>\r\n\r\n          <p>Premiere Chanson</p>\r\n          <p>{this.state.musicData[0].track.name}</p>\r\n\r\n          <div>Là je suis quelque part dans mon composant principal et j'ai envie d'afficher le composant en dessous.</div>\r\n          <AlbumCover track={this.state.track}/>\r\n          <div>Et voilà, vous pouvez voir au dessus j'ai affiché le composant</div>\r\n          <Sound url={this.state.track.preview_url} playStatus={Sound.status.PLAYING}/>\r\n        </div>\r\n        <div className=\"App-buttons\">\r\n          <button onClick={() => this.checkAnswer(this.state.track_array[0].id)}>{this.state.track_array[0].name}</button>\r\n          <button onClick={() => this.checkAnswer(this.state.track_array[1].id)}>{this.state.track_array[1].name}</button>\r\n          <button onClick={() => this.checkAnswer(this.state.track_array[2].id)}>{this.state.track_array[2].name}</button>\r\n        </div>\r\n      </div>\r\n      );\r\n    } else {\r\n      return(<img src={loading} className=\"App-loading\" alt=\"loading\"/>);\r\n    };\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}